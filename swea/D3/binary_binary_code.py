'''
2
16 80
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000011101101100010111011011000101100010001101001001101110110000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
11 70
00000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000001100101000110100011010111101101110010011001001101110110000000000
00000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000

'''
# 복호화용 딕셔너리
pass_key = {"0001101": 0, "0011001": 1, "0010011": 2, "0111101": 3, "0100011": 4, "0110001": 5,
            "0101111": 6, "0111011": 7, "0110111": 8, "0001011": 9}
T = int(input())


def stop_input(a):
    for i in range(a):
        input()


for tc in range(1, T + 1):
    N, M = map(int, input().split())  # N = 가로길이, M = 세로길이
    for i in range(N):
        password_case = input()
        end = 0
        # 비밀번호 탐색
        for j in range(M - 1, -1, -1):
            # 비밀번호는 종료 지점이 1로 끝나므로 찾으면 인덱스 저장 후 탐색 종료
            if password_case[j] == "1":
                end = j
                break

        if end:
            password = password_case[end - 55:end + 1]
            # 비밀번호를 찾으면 탐색과정을 실행하지 않기 위해 남은 입력을 버림
            stop_input(N - i - 1)
            break

    start = 0  # 탐색 시작지점
    end = 7  # 탐색 종료지점
    odd_num = 0  # 홀수번호
    even_num = 0  # 짝수 번호
    for i in range(8):
        if i % 2 == 0:
            odd_num += pass_key[password[start:end]]
        else:
            even_num += pass_key[password[start:end]]

        # 0 ~ 6, 7 ~ 13 , ... 7개씩 찾아주기 위해 7씩 늘려줌
        start = end
        end += 7

    # 유효한 비밀번호 확인 과정
    check_pass = odd_num * 3 + even_num
    if check_pass % 10 != 0:
        result = 0
    else:
        result = odd_num + even_num

    print(f"#{tc} {result}")
